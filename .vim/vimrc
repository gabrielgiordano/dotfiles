" vim: fdm=marker
nnoremap <Space> za

" Vundle {{{1

set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/vundle.vim'

" Plugins {{{1

Plugin 'flazz/vim-colorschemes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'pangloss/vim-javascript'
Plugin 'vim-ruby/vim-ruby'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-cucumber'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'mattn/emmet-vim'
Plugin 'mileszs/ack.vim'

" Vundle {{{1

call vundle#end()
filetype plugin indent on

" UI {{{1

syntax enable
colorscheme Monokai

set number
set colorcolumn=80
set nowrap
set ruler
set showcmd
set noshowmode
set showmatch
set laststatus=2
set list listchars=tab:»·,trail:·,nbsp:·

" Indentation {{{1

set autoindent
set tabstop=2
set softtabstop=2
set expandtab
set shiftwidth=2
set shiftround

" Searching {{{1

set hlsearch
set incsearch
set ignorecase
set smartcase

" Key Mappings {{{1

map Q gq

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" CtrlP {{{1

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/.git/*

let g:ctrlp_open_func = { 'files': 'CustomOpenFunc' }
function! CustomOpenFunc(action, line)
  call call('ctrlp#acceptfile', [':t', a:line])
endfunction

" NERDTree {{{1

map <C-n> :NERDTreeToggle<CR>

" Vim Airline {{{1

let g:airline_theme='term'
" ThemePatch {{{2
let g:airline_theme_patch_func = 'AirlineThemePatch'
  function! AirlineThemePatch(palette)
    if g:airline_theme == 'term'
      let g:airline_left_sep=''
      let g:airline_right_sep=''
    endif
  endfunction
" 2}}}

" RSpec Vim {{{1

map tf :call RunCurrentSpecFile()<CR>
map te :call RunNearestSpec()<CR>
map tt :call RunLastSpec()<CR>
map tA :call RunAllSpecs()<CR>

" Silver Searcher {{{1

" https://github.com/thoughtbot/dotfiles/blob/e51d8b73f0d8ab99d1a12efdfbcd6dd287bec15c/vimrc#L65
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Tab Completion {{{1

" https://github.com/thoughtbot/dotfiles/blob/e51d8b73f0d8ab99d1a12efdfbcd6dd287bec15c/vimrc#L90
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Other Settings {{{1

set history=5000
set encoding=utf-8
set backspace=indent,eol,start
set selection=exclusive
" set clipboard=unnamed
set noswapfile
set nojoinspaces

" trim_trailing_white_space_on_save
autocmd FileType ruby,html,css,javascript,eruby,dockerfile,cucumber autocmd BufWritePre <buffer> %s/\s\+$//e
set eol

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Fast escape key
set timeoutlen=1000 ttimeoutlen=0

" tpope cucumber tables alignment gist {{{1

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

