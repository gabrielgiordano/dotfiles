" vim: fdm=marker
nnoremap <Space> za

" Vundle {{{1
set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/vundle.vim'

" Plugins {{{1

Plugin 'flazz/vim-colorschemes'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'airblade/vim-gitgutter'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'w0rp/ale'
Plugin 'pbrisbin/vim-mkdir'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'janko-m/vim-test'
Plugin 'tpope/vim-dispatch' " vim-test dependency
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-cucumber'
Plugin 'godlygeek/tabular' " tim-pope gist dependency
Plugin 'pangloss/vim-javascript'
Plugin 'mattn/emmet-vim'

" Vundle {{{1

call vundle#end()

" Vim Settings {{{1

set nocompatible                   " Don't bother making vim compatible with vi
filetype plugin indent on

set history=5000                   " Command history size
set encoding=utf-8
set clipboard=unnamed
set noswapfile
set timeoutlen=1000 ttimeoutlen=0  " Fast escape key

" Performance {{{2

set ttyfast                        " Faster redrawing
set lazyredraw                     " Only redraw when necessary

" Interface {{{2

colorscheme Monokai                      " Dependend on vim-colorschemes
syntax enable

set number                               " Show line numbers
set colorcolumn=80                       " Show where column 80 is
set nowrap                               " Don't wrap long lines
set ruler                                " Show cursor postion all time
set showcmd                              " Show command as you type
set laststatus=2                         " Always show the status line
set noshowmode                           " Mode will be shown in status line
set list listchars=tab:»·,trail:·,nbsp:· " Show non printable characters.

" Window Management {{{2

set splitbelow           " Open slipt pane to bottom which feels more natural
set splitright           " Open slipt pane to right which feels more natural

" Searching {{{2

set hlsearch
set incsearch
set ignorecase
set smartcase

" Editing {{{2

set selection=exclusive           " Exclude last character when selecting in visual mode
set showmatch                     " Show matched parentesis, brackets...
set backspace=indent,eol,start    " Normal backspace behaviour
set nojoinspaces                  " Don't insert space after .,?! with a j cmd
set eol                           " Always write end of line in a file

" trim_trailing_white_space_on_save
autocmd FileType ruby,html,css,javascript,eruby,dockerfile,cucumber autocmd BufWritePre <buffer> %s/\s\+$//e

" Indentation {{{3

set autoindent                    " Copy indent from current line
set expandtab                     " Use spaces instead of Tabs
set softtabstop=2                 " Tab key indents 2 spaces
set shiftwidth=2                  " >> indents 2 spaces
set shiftround                    " >> indent to multiple of 'shiftwidth'
set tabstop=2                     " Number of spaces a Tab counts

" Key Mappings {{{1

let mapleader = ","
map Q gq

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Switch between the last two files
nnoremap <Leader><Leader> <c-^>

" Create new line without leaving normal mode
nnoremap <CR> O<Esc>j

" Break line without going into insert mode
nnoremap <Leader>b i<CR><Esc>k$

" NERDTree
noremap <C-n> :NERDTreeToggle<CR>

" test.vim
nnoremap <Leader>tf :TestFile<CR>
nnoremap <Leader>te :TestNearest<CR>
nnoremap <Leader>tl :TestLast<CR>
nnoremap <Leader>ts :TestSuite<CR>
nnoremap <Leader>tv :TestVisit<CR>

" CtrlP {{{1

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/.git/*

" Vim Airline {{{1

let g:airline_theme='term'
" ThemePatch {{{2
let g:airline_theme_patch_func = 'AirlineThemePatch'
  function! AirlineThemePatch(palette)
    if g:airline_theme == 'term'
      let g:airline_left_sep=''
      let g:airline_right_sep=''
    endif
  endfunction
" 2}}}

" test.vim {{{1

let test#strategy = "dispatch"

" Silver Searcher {{{1

" https://github.com/thoughtbot/dotfiles/blob/e51d8b73f0d8ab99d1a12efdfbcd6dd287bec15c/vimrc#L65
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag -Q -l --nocolor --hidden -g "" %s'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  if !exists(":Ag")
    command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
    nnoremap \ :Ag<SPACE>
  endif
endif

" Tab Completion {{{1

" https://github.com/thoughtbot/dotfiles/blob/e51d8b73f0d8ab99d1a12efdfbcd6dd287bec15c/vimrc#L90
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" tpope cucumber tables alignment gist {{{1

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

